1;Which of the following data structures allows efficient insertion and deletion at any position?#A) Array#B) Stack#C) Queue#D) Linked List;D;3
2;What is the time complexity of accessing an element by its index in an array?#A) O(1)#B) O(log n)#C) O(n)#D) O(n^2);A;3
3;What is the time complexity of searching for an element in an unsorted array of size n?#A) O(1)#B) O(log n)#C) O(n)#D) O(n^2);C;3
4;What is the advantage of using an array over a linked list?#A) Efficient random access#B) Dynamic resizing#C) Efficient insertion at the end#D) Less memory overhead#;A;3
5;What is the disadvantage of using an array over a linked list?#A) Efficient random access#B) Fixed size#C) Efficient insertion at the beginning#D) Less memory overhead;B;3
6;Linked lists are typically implemented using:#A) Arrays#B) Pointers#C) Stacks#D) Queues;B;3
7;What are the different types of traversals you can perform on a tree data structure? (Choose all that apply)#A) Pre-order traversal#B) In-order traversal#C) Post-order traversal#D) Breadth-first search (BFS) traversal;A#B#C#D;3
8;How can you represent a graph data structure? (Choose all that apply)#A) Adjacency matrix#B) Adjacency list#C) Linked list#D) Binary search tree;A#B;3
9;What is the difference between recursion and iteration?#A) Recursion always uses more stack space than iteration.#B) Iteration is always faster than recursion.#C) Recursion cannot be used for problems with loops.#D) Iteration involves nested loops while recursion involves function calls;A;3
10;What does Big O notation represent?#A) The specific operations supported by a data structure#B) The functionality of a data structure#C) The efficiency of an algorithm in terms of time and space complexity#D) The memory layout of a data structure;C;3
11;What is the purpose of dynamic programming?#a) To solve optimization problems by breaking them down into subproblems#b) To improve the efficiency of recursion#c) To manage memory allocation for data structures#d) To represent hierarchical relationships;a;3
12;What is an abstract data type (ADT)?#a) A concrete implementation of a data structure#b) A specific data structure like an array or linked list#c) A mathematical definition of a data structure's behavior and operations#d) A collection of algorithms for manipulating data;c;3
13;What are the trade-offs between time complexity and space complexity in algorithms?#a) A more efficient algorithm in terms of time complexity will always use more space.#b) There is often a trade-off between using less time or less space for an algorithm.#c) A simpler algorithm with lower space complexity will always be slower.#d) Time complexity is independent of space complexity.;b;3
14;What is the purpose of using comments in code when implementing data structures and algorithms?#a) To improve the efficiency of the code#b) To explain the logic and functionality of the code for better readability#c) To reserve memory for variables#d) To modify the behavior of the code;b;3
15;Which of these is a divide and conquer algorithm? a) Merge Sort#b) Bubble Sort#c) Selection Sort#d)Insertion Sort;a;3
16;Which of the following data structures follows the Last In# First Out (LIFO) principle?#a) Array#b) Stack#c) Queue#d) Linked list;b;3
17;What algorithm is used to find the shortest path in a graph? a) Binary Search#b) Dijkstra's#c) Depth First Search#d)Linear Search;d;3
18;How can a stack be implemented using an array?#a) By storing elements at the beginning of the array and incrementing a counter for each push operation.#b) By storing elements at the end of the array and maintaining a pointer to the top element.#c) By using a separate data structure like a linked list to manage element order.#d) Stacks cannot be efficiently implemented using arrays due to their fixed size.;b;3
19;What is a limitation of using an array-based implementation for a stack?#a) Inefficient element access by index.#b) Limited functionality for stack operations (push# pop# peek).#c) Difficulty in handling dynamic resizing for growing data.#d) Stacks are inherently slower than queue implementations.;c;3
20;A queue follows the principle of:#a) Last In# First Out (LIFO)#b) First In# First Out (FIFO)#c) Random access#d) Ordered insertion;b;3
21;How can a queue be implemented using an array?#a) By storing elements at the beginning of the array and shifting elements down on dequeue operations.#b) By storing elements at the end of the array and maintaining a pointer to the front and back elements.#c) Queues cannot be efficiently implemented using arrays due to their fixed size limitations.#d) Queues are inherently slower than stack implementations.;b;3
22;What is a circular queue?#a) A queue with a fixed size and a circular buffer for element storage# allowing efficient use of memory.#b) A queue that can grow dynamically as elements are added.#c) A specialized queue for storing only numerical data.#d) A type of queue that prioritizes elements based on their values.;a;3
23;What is a priority queue?#a) A queue where elements are ordered by their arrival time.#b) A specialized queue for storing only strings.#c) A queue that prioritizes elements based on a predefined value (e.g.# importance# urgency).#d) A type of queue that allows efficient searching for specific elements.;c;3
24;How can priority queues be implemented efficiently using:#a) Stacks#b) Arrays (with limitations)#c) Linked Lists#d) Heaps;d;3
25;Which of the following is NOT a typical operation on a queue?#a) Enqueue (add element)#b) Dequeue (remove element)#c) Peek (get front element without removal)#d) Search for a specific element by value (may be inefficient depending on implementation);d;3
26;What is the time complexity of enqueue and dequeue operations on a queue implemented using an array with a fixed size (assuming no overflow)?#a) O(1) (assuming constant access time to array elements)#b) O(log n)#c) O(n)#d) O(n^2);a;3
27;What is the time complexity of searching for a specific element by value in a queue?#a) O(1) (if the queue maintains a search index)#b) O(log n)#c) O(n) (typically requires iterating through elements)#d) O(n^2);c;3
28;What are the advantages of using a linked list to implement a queue compared to an array?#a) Efficient random access of elements#b) Dynamic resizing to accommodate growing data#c) Faster enqueue operations#d) Less memory overhead;b;3
29;What are the disadvantages of using a linked list to implement a queue compared to an array?#a) Efficient random access of elements#b) Dynamic resizing#c) Slower dequeue operations due to pointer manipulation#d) Less memory overhead;c;3
30;What is the time complexity of finding the kth smallest element in an unsorted array of size 'n'?#a) O(1)#b) O(log n)#c) O(n)#d) O(n log n);d;3
31;Which of the following statements about singly linked lists is true?#a) They allow efficient insertion and deletion at any position in constant time.#b) They are well-suited for random access of elements by index.#c) They offer efficient insertion at the beginning but require traversing the list for deletion from the middle.#d) They are more memory-efficient than arrays due to the lack of contiguous memory allocation.;c;3
32;What are the typical nodes of a singly linked list composed of? (Choose all that apply)#a) Data field to store the value#b) Pointer to the next node in the list#c) Pointer to the previous node in the list#d) Size information for the data field;b;3
33;How can you efficiently insert a new node at the beginning of a singly linked list?#a) By creating a new node# setting its data and next pointer to the current head# and updating the head pointer to the new node.#b) By traversing the list to the end and adding the new node there.#c) By modifying the data field of the existing head node.#d) Singly linked lists do not allow insertion at the beginning.;a;3
34;How can you delete a node from the middle of a singly linked list?#a) By directly modifying the node's data field.#b) This operation is not efficient in singly linked lists due to the lack of a previous pointer.#c) By deleting the head node and updating the head pointer.#d) Singly linked lists do not allow deletion of nodes.;b;3
35;Doubly linked lists differ from singly linked lists by having:#a) Only a data field in each node#b) A pointer to the next node only#c) A pointer to the previous node in addition to the next pointer#d) A fixed size for the entire list;c;3
36;What are the advantages of using doubly linked lists compared to singly linked lists?#a) Efficient insertion and deletion at any position#b) Less memory overhead#c) Faster random access of elements by index#d) Simpler implementation for basic operations;a;3
37;What are the disadvantages of using doubly linked lists compared to singly linked lists?#a) Efficient insertion and deletion at any position#b) More memory overhead due to the additional pointer in each node#c) Faster random access of elements by index#d) Simpler implementation for basic operations;b;3
38;A circular linked list:#a) Has a null pointer at the tail node.#b) Has the last node pointing to the first node# creating a loop.#c) Is less efficient for traversing compared to a linear list.#d) Cannot be used to implement a queue.;b;3
39;What are the advantages of using a circular linked list for a queue implementation?#a) Efficient random access of elements#b) Faster enqueue operations#c) Efficient dequeue operations due to the circular structure#d) Less memory overhead;c;3
40;What are the disadvantages of using a circular linked list for a queue implementation?#a) Efficient random access of elements#b) Faster enqueue operations#c) Potentially less efficient dequeue operations compared to a linear queue (may require traversing to find the tail node)#d) More memory overhead;c;3
41;Which of the following statements about linked list deletion is true?#a) Deleting the head node requires no pointer modifications.#b) Deleting from the beginning is always faster than deleting from the end.#c) Deleting from the middle requires traversing the entire list in the worst case for singly linked lists.#d) Linked list deletion is always slower than array deletion.;c;3
42;How can you efficiently reverse a singly linked list in-place?#a) By creating a new reversed list while iterating through the original list.#b) By modifying the data stored in each node of the list.#c) By swapping the next pointers of nodes iteratively# changing the direction of the linked list.#d) Reversing a singly linked list in-place is not possible efficiently.;c;3
43;What are the applications of linked lists? (Choose all that apply)#a) Implementing stacks and queues#b) Representing sparse data structures#c) Representing graphs#d) Implementing binary search trees efficiently;a;3
44;What are the advantages of linked lists compared to arrays?#a) Efficient random access of elements#b) Dynamic resizing to accommodate growing or shrinking data#c) Faster insertion and deletion at any position (except for the beginning in singly linked lists)#d) Less memory overhead (for sparse data structures);b;3
45;What is the time complexity of finding the kth smallest element in an unsorted array of size 'n'?#a) O(1)#b) O(log n)#c) O(n)#d) O(n log n);d;3
46;A binary search tree (BST) guarantees:#a) Constant time access to any element#b) Ordering of elements for efficient searching#c) Dynamic resizing to accommodate insertions without affecting search efficiency (not always true)#d) Balanced structure in all cases;b;3
47;How are nodes in a binary search tree typically arranged?#a) In any order#b) Elements in the left subtree are less than the root# and elements in the right subtree are greater than the root.#c) Elements are arranged in ascending order from left to right.#d) The tree is balanced with an equal number of nodes in each subtree;b;3
48;What is the time complexity of searching for an element in a balanced binary search tree?#a) O(1)#b) O(log n) (assuming efficient implementation)#c) O(n)#d) O(n^2);b;3
49;Balanced binary trees like AVL trees or Red-Black trees aim to achieve:#a) Minimum depth for all nodes#b) Efficient insertion and deletion while maintaining search efficiency#c) Reduced memory usage compared to standard BSTs#d) A specific order of elements for traversal;b;3
50;What is the time complexity of inserting a new element into a balanced binary search tree?#a) O(1)#b) O(log n) (assuming efficient implementation)#c) O(n)#d) O(n^2);b;3
51;A full binary tree:#a) Has all levels except the last completely filled#b) Is always a balanced tree#c) Is well-suited for representing hierarchical relationships#d) Allows for efficient searching by key;a;3
52;What is the time complexity of a pre-order traversal of a binary tree with n nodes?#a) O(1)#b) O(log n)#c) O(n) (visits each node exactly once)#d) O(n^2);c;3
53;What is the purpose of a depth-first search (DFS) traversal of a tree or graph?#a) To find the shortest path between two nodes (not guaranteed)#b) To visit all nodes in the structure systematically#c) To efficiently search for a specific node with a known value#d) To sort the elements of the tree or graph;b;3
54;How does a DFS traversal explore the nodes of a tree?#a) By visiting all child nodes of a parent before moving to siblings.#b) By visiting the leftmost branch entirely before exploring any right branches.#c) By visiting nodes in a level-by-level order.#d) There is no specific order# DFS visits nodes randomly.;a;3
55;What is the difference between a DFS traversal and a breadth-first search (BFS) traversal of a tree or graph?#a) DFS explores child nodes first# while BFS explores siblings first.#b) DFS guarantees finding the shortest path# while BFS does not.#c) DFS is only applicable to trees# while BFS can be used for both trees and graphs.#d) There is no significant difference# they both visit all nodes.;a;3
56;What is a common application of a BFS traversal?#a) Finding the shortest path between two nodes in an unweighted graph.#b) Finding the node with the maximum value in a tree.#c) Pre-order traversal is typically used for printing elements.#d) Depth-first search is more efficient for finding specific nodes.;a;3
57;Hash tables use a technique called:#a) Binary search#b) Hashing#c) Breadth-first search#d) Depth-first search;b;3
58;What is the purpose of a hash function in a hash table?#a) To sort the elements for efficient retrieval#b) To map keys to unique indices in the hash table array#c) To perform comparisons between keys during search operations#d) To dynamically resize the hash table;b;3
59;Collisions occur in a hash table when:#a) The hash function always generates unique indices#b) Two different keys map to the same index in the hash table array#c) The hash table is full and cannot store more elements#d) The data structure is not implemented correctly;b;3
60;What is the time complexity of a successful search in a hash table with a good hash function and collision handling (assuming average case)?#a) O(1) (ideally constant time)#b) O(log n)#c) O(n)#d) O(n^2);a;3
61;What is the trade-off between the size of the hash table and the average search time?#a) A larger hash table leads to slower search times#b) A smaller hash table increases the probability of collisions and potentially slower searches#c) The size of the hash table does not affect the search time#d) A larger hash table is always more efficient;b;3
62;Heaps are a specialized type of tree structure used for:#a) Efficient searching by key#b) Maintaining a sorted order of elements#c) Representing hierarchical relationships#d) Implementing stacks and queues efficiently;b;3
63;There are two main types of heaps:#a) Min-heaps and max-heaps#b) Ordered heaps and unordered heaps#c) Static heaps and dynamic heaps#d) Balanced heaps and unbalanced heaps;a;3
64;In a min-heap# the value of a parent node is:#a) Greater than or equal to the values of its children#b) Less than or equal to the values of its children#c) Unrelated to the values of its children#d) The average of the values of its children;a;3
65;What is the time complexity of finding the minimum element in a min-heap?#a) O(n) (requires traversing the entire heap)#b) O(log n) (efficient due to the heap property)#c) O(1) (assuming constant time access to the root node)#d) The complexity depends on the size of the heap and the specific implementation.;b;3
66;What is the time complexity of inserting a new element into a min-heap?#a) O(1)#b) O(log n) (requires maintaining the heap property)#c) O(n) (may require restructuring the entire heap in the worst case)#d) The complexity depends on the value of the new element.;b;3
67;Heaps are often used to implement priority queues:#a) Because they efficiently maintain a sorted order of elements based on priority.#b) Because they allow efficient searching for elements with specific priorities.#c) Because they are more space-efficient than traditional queues.#d) Heaps are not suitable for implementing priority queues.;a;3
68;What are some limitations of using heaps compared to other data structures like sorted arrays?#a) Heaps do not allow efficient random access of elements by index.#b) Inserting and deleting elements in a heap can be slower than in a sorted array (due to heap property maintenance).#c) Heaps are more complex to implement and use.#d) Heaps are not suitable;a;3
69;What is the time complexity of finding the minimum element in a min-heap?#a) O(n) (requires traversing the entire heap)#b) O(log n) (efficient due to the heap property)#c) O(1) (assuming constant time access to the root node)#d) The complexity depends on the size of the heap and the specific implementation.;b;3
70;What is the time complexity of inserting a new element into a min-heap?#a) O(1)#b) O(log n) (requires maintaining the heap property)#c) O(n) (may require restructuring the entire heap in the worst case)#d) The complexity depends on the value of the new element.;b;3
71;Heaps are often used to implement priority queues:#a) Because they efficiently maintain a sorted order of elements based on priority.#b) Because they allow efficient searching for elements with specific priorities.#c) Because they are more space-efficient than traditional queues.#d) Heaps are not suitable for implementing priority queues.;a;3
72;What are some limitations of using heaps compared to other data structures like sorted arrays?#a) Heaps do not allow efficient random access of elements by index.#b) Inserting and deleting elements in a heap can be slower than in a sorted array (due to heap property maintenance).#c) Heaps are more complex to implement and use.#d) Heaps are not suitable;b;3
73;What is the purpose of a hash function in a hash table?#a) To sort the elements for efficient retrieval#b) To map keys to unique indices in the hash table array#c) To perform comparisons between keys during search operations#d) To dynamically resize the hash table;b;3
74;What is the worst case time complexity of a linear search? a)O(n^2)#b)O(1)#c)O(log n)#d)O(n);d;3
75;Graphs are used to represent:#a) Linear sequences of data#b) Hierarchical relationships (can be used# but not always the best choice)#c) Networks of interconnected objects#d) Sorted collections of elements;c;3
76;Graphs consist of:#a) Elements called nodes only#b) Elements called nodes and connections between them called edges#c) Edges only#d) A single root node and child nodes;b;3
77;Depth-first search (DFS) can be used on graphs to:#a) Find the shortest path between two nodes (not guaranteed)#b) Check if a graph is connected (all nodes reachable from a starting point)#c) Find the minimum spanning tree of a weighted graph (requires additional techniques)#d) Efficiently search for a specific node with a known value;b;3
78;Breadth-first search (BFS) can be used on graphs to:#a) Find the shortest path between two nodes in an unweighted graph.#b) Check if a graph is acyclic (contains no cycles)#c) Find the Eulerian circuit of a graph (a path that visits each edge exactly once)#d) Sort the nodes of the graph based on their distance from a starting point;a;3
79;What is the time complexity of a DFS traversal on a graph with V vertices and E edges (assuming an appropriate data structure for representing the graph)?#a) O(V) (visits each vertex once in the worst case)#b) O(E) (visits each edge once in the worst case)#c) O(log V)#d) The complexity depends on the specific graph structure.;a;3
80;What is Dijkstra's algorithm used for?#a) Finding all-pairs shortest paths in a weighted graph#b) Finding the minimum spanning tree of a weighted graph#c) Checking if a graph is bipartite (can be divided into two independent sets)#d) Detecting cycles in a directed graph;b;3
81;What is a minimum spanning tree (MST) of a weighted graph?#a) A path that visits all nodes exactly once and minimizes the total edge weights.#b) A tree that connects all nodes in the graph with the shortest possible total distance.#c) A cycle in the graph with the minimum total edge weight.#d) A subset of edges that connects all nodes while minimizing the number of edges used.;a;3
82;Kruskal's algorithm and Prim's algorithm are two common algorithms used to find:#a) The shortest path between two specific nodes in a weighted graph#b) The minimum spanning tree (MST) of a weighted graph#c) The Eulerian circuit of a directed graph#d) All cycles present in an undirected graph;b;3
83;What is an AVL tree?#a) A type of binary search tree that guarantees O(1) search time in all cases (not true).#b) A balanced binary search tree that maintains a height difference constraint between subtrees for efficient operations.#c) A tree specifically designed for storing string data.#d) A type of tree used for representing hierarchical relationships only.;b;3
84;How do AVL trees maintain balance?#a) By using self-balancing rotations during insertions and deletions to keep the height difference within bounds.#b) By ensuring all nodes have exactly two child nodes.#c) By periodically rebuilding the tree from scratch.#d) AVL trees are not guaranteed to be balanced in all cases.;a;3
85;What are Red-Black trees?#a) Another type of balanced binary search tree with similar properties to AVL trees but with slightly different balancing rules.#b) A tree data structure specifically designed for storing colored data.#c) A type of tree used for efficient pattern matching in text processing.#d) A less efficient alternative to standard binary search trees.;a;3
86;What is a B-Tree?#a) A self-balancing search tree designed for efficient storage and retrieval of data on disk.#b) A tree structure used for representing hierarchical relationships with variable branching factors.#c) A specialized tree for storing and manipulating mathematical expressions.#d) A type of tree not suitable for searching operations.;a;3
87;What are the advantages of B-Trees compared to standard binary search trees for disk-based data storage?#a) B-Trees can store more keys and child nodes per node# reducing disk I/O operations.#b) B-Trees guarantee O(1) search time in all cases (not true).#c) B-Trees are simpler to implement and use.#d) B-Trees are not suitable for in-memory data structures.;a;3
88;What is a segment tree?#a) A tree data structure designed for efficient range queries on an array.#b) A type of tree used for representing hierarchical relationships with weighted edges.#c) A tree structure specifically designed for storing and manipulating geometric data.#d) A less space-efficient alternative to binary search trees.;a;3
89;How are segment trees used for efficient range queries?#a) Each node in the tree stores the minimum or maximum value within its corresponding range in the array.#b) By traversing the tree and combining information from relevant nodes to answer range queries efficiently.#c) Segment trees are not suitable for searching for specific elements.#d) They require complex modifications to the underlying array structure.;a;3
90;What is a splay tree?#a) A self-balancing binary search tree that dynamically adjusts its structure based on access patterns to improve search performance for frequently accessed elements.#b) A tree data structure used for representing relationships between objects with different properties.#c) A specialized tree for storing and manipulating sets of data efficiently.#d) A type of tree not well-suited for general-purpose searching.;a;3
91;What are the advantages of splay trees?#a) They can amortized constant time search performance for frequently accessed elements.#b) Splay trees are simpler to implement than AVL trees.#c) They are well-suited for static data sets where access patterns are well-defined.#d) Splay trees are not guaranteed to be balanced in all cases.;a;3
92;What are suffix trees used for?#a) Representing and searching for all possible substrings within a given string efficiently.#b) Implementing efficient sorting algorithms for string data.#c) Representing hierarchical relationships with labeled edges.#d) A type of tree not suitable for string processing tasks.;a;3
93;What is an AVL tree?#a) A type of binary search tree that guarantees O(1) search time in all cases (not true).#b) A balanced binary search tree that maintains a height difference constraint between subtrees for efficient operations.#c) A tree specifically designed for storing string data.#d) A type of tree used for representing hierarchical relationships only.;b;3
94;How do AVL trees maintain balance?#a) By using self-balancing rotations during insertions and deletions to keep the height difference within bounds.#b) By ensuring all nodes have exactly two child nodes.#c) By periodically rebuilding the tree from scratch.#d) AVL trees are not guaranteed to be balanced in all cases.;a;3
95;What are Red-Black trees?#a) Another type of balanced binary search tree with similar properties to AVL trees but with slightly different balancing rules.#b) A tree data structure specifically designed for storing colored data.#c) A type of tree used for efficient pattern matching in text processing.#d) A less efficient alternative to standard binary search trees.;a;3
96;What is the time complexity of bubble sort in the worst case?#a) O(n) (if the array is already sorted)#b) O(n log n)#c) O(n^2)#d) O(n^3);c;3
97;How does bubble sort work?#a) By repeatedly iterating through the list# comparing adjacent elements# and swapping them if they are in the wrong order.#b) By partitioning the list into a sorted and unsorted sub-list and recursively sorting each sub-list.#c) By building a heap data structure and repeatedly removing the minimum element.#d) By dividing the list into sub-lists# merging them in sorted order and repeating (used in merge sort).;a;3
98;What is the time complexity of selection sort in the worst case?#a) O(n) (if the array is already sorted)#b) O(n log n)#c) O(n^2)#d) O(n^3);c;3
99; How does selection sort work?#a) By finding the minimum element in the unsorted part of the list and swapping it with the first element.#b) By partitioning the list into a pivot element and two sub-lists# placing elements greater than the pivot to its right and elements less than the pivot to its left (used in quicksort).#c) By building a heap data structure and repeatedly removing the minimum element.#d) By dividing the list into sub-lists# merging them in sorted order# and repeating (used in merge sort).;a;3
100;What is the time complexity of insertion sort in the worst case?#a) O(n) (if the array is already sorted)#b) O(n log n)#c) O(n^2)#d) O(n^3);c;3
101;How does insertion sort work?a) By iterating through the list# growing a sorted sub-list at the beginning# and inserting each element from the unsorted part into its correct position within the sorted sub-list.#b) By partitioning the list into a pivot element and two sub-lists (used in quicksort).#c) By building a heap data structure and repeatedly removing the minimum element.#d) By dividing the list into sub-lists# merging them in sorted order# and repeating (used in merge sort).;a;3
102;What is a characteristic of quicksort that makes its average-case time complexity better than bubble sort# selection sort# and insertion sort?a) It avoids unnecessary swaps by only partitioning the list once.#b) It utilizes a divide-and-conquer approach# potentially reducing comparisons in sorted or nearly sorted sub-lists.#c) It always moves the largest element to the end in each iteration.#d) It efficiently handles duplicate elements within the list.;b;3
103;What is the worst-case time complexity of quicksort?a) O(n) (if the array is already sorted)#b) O(n log n) (average case# but can degrade to O(n^2) in the worst case)#c) O(n^2)#d) O(n^3);b;3
104;What can cause quicksort to have a worst-case time complexity of O(n^2)?a) The pivot element chosen in each partition is always the largest or smallest element.#b) The list is already sorted in descending order.#c) The list contains many duplicate elements.#d) Quicksort is inherently inefficient for large data sets.;a;3
105;Merge sort is a divide-and-conquer sorting algorithm that works by:a) Repeatedly dividing the list into sub-lists of size 1# then merging adjacent sub-lists in sorted order.#b) Selecting a pivot element# partitioning the list# and recursively sorting sub-lists.#c) Building a heap data structure and repeatedly removing the minimum element.#d) Inserting elements into a sorted sub-list at the beginning of the list.;a;3
106;What data structure is most suitable for representing a collection of unique elements where efficient membership testing (checking if an element exists) is crucial?a) Array (if the size is fixed and elements can be accessed by index)#b) Linked List (not ideal for efficient membership testing)#c) Hash Table (utilizes hashing for fast lookups)#d) Tree (can be used for membership testing# but hash tables are generally faster);c;3
107;In a hash table# what is a collision and how can it be handled?a) A collision occurs when two different keys map to the same index in the hash table array.#b) It happens when the hash table is full and cannot store more elements.#c) Collisions cannot be avoided in any hash table implementation.#d) There are no ways to handle collisions in a hash table.;a;3
108;In a B-Tree# what is the main advantage compared to a standard binary search tree for disk-based data storage?a) B-Trees can guarantee O(1) search time in all cases.#b) B-Trees can store more keys and child nodes per node# reducing disk I/O operations.#c) B-Trees are simpler to implement than standard binary search trees.#d) B-Trees are not suitable for in-memory data structures.;b;3
109;What is a trie data structure used for?a) Representing hierarchical relationships with labeled edges (can be used# but not the most efficient)#b) Implementing efficient sorting algorithms (not typically used for sorting)#c) Efficiently storing and searching for strings with a common prefix. (useful for autocompletion or spell checking)#d) Performing complex mathematical computations (not typically used for this);c;3
110;What is the time complexity of finding the minimum element in an amortized constant time implementation of a splay tree?a) O(1) (amortized constant time)#b) O(log n)#c) O(n)#d) O(n^2);a;3
111;What is the difference between a depth-first search (DFS) and a breadth-first search (BFS) traversal on a graph?a) DFS explores all child nodes of a parent before moving to siblings.#b) BFS explores the leftmost branch entirely before exploring any right branches (not typically used for general graph traversal).#c) DFS guarantees finding the shortest path (not guaranteed).#d) BFS is more efficient for finding specific nodes with a known value (DFS can be more efficient in some cases).;a;3
112;What is a topological sort applicable to?a) Finding the shortest path between two nodes in a directed acyclic graph (DAG)#b) Ordering the vertices in a directed acyclic graph (DAG) such that for every directed edge (u# v)# u appears before v in the ordering.#c) Finding strongly connected components in a directed graph#d) Detecting cycles in an undirected graph (can be done with DFS);b;3
113;What is the Bellman-Ford algorithm used for?a) Finding the shortest path between a single source node and all reachable nodes in a weighted graph (Dijkstra's algorithm is better suited for this)#b) Finding all-pairs shortest paths in a weighted graph that may contain negative edge weights.#c) Determining if a graph contains a negative-weight cycle (can be used with Bellman-Ford)#d) Finding the minimum spanning tree of a weighted graph (Prim's or Kr; b;3
114;What is a minimum cost spanning tree (MST) problem?a) Finding the path that visits all nodes in a graph exactly once and minimizes the total edge weights.#b) Finding a tree that connects all nodes in the graph with the shortest possible total distance.#c) Finding the Eulerian circuit of a graph (a path that visits each; a;3
115;What is the main difference between a minimum spanning tree (MST) and a shortest path tree?a) An MST connects all nodes in a graph with minimal total edge weight# while a shortest path tree focuses on the shortest path to a specific source node.#b) An MST can only be found in undirected graphs# while shortest path trees can be found in both directed and undirected graphs.#c) MST algorithms like Prim's or Kruskal's are more efficient than Dijkstra's algorithm for finding shortest paths (not true).#d) There is no practical difference between a minimum spanning tree and a shortest path tree.;a;3
116;Kruskal's algorithm and Prim's algorithm are two well-known algorithms for finding a minimum spanning tree (MST). What property do they share?a) They both work by building the MST from the longest edges outward (not true).#b) They both iteratively add edges to the growing tree based on a greedy approach# prioritizing edges with minimal weight.#c) They can only be used for finding MSTs in undirected graphs with non-negative edge weights.#d) They always produce different MSTs for the same input graph (not necessarily true).;b;3
117;In a self-balancing binary search tree like an AVL tree# what is the guaranteed maximum height difference between subtrees for a tree with n nodes?a) O(n) (the height can grow linearly in the worst case# not guaranteed to be balanced)#b) O(log n) (AVL trees maintain a logarithmic height difference)#c) O(1) (not true for all self-balancing trees)#d) The maximum height difference depends on the specific implementation details.;b;3
118;What is the main advantage of using a splay tree compared to a standard binary search tree?a) Splay trees guarantee O(1) search time for all elements (not true).#b) Splay trees dynamically adjust their structure based on access patterns# potentially improving search performance for frequently accessed elements.#c) Splay trees are simpler to implement than standard binary search trees.#d) Splay trees are well-suited for static data sets where access patterns are not well-defined.;b;3
119;What is a suffix tree used for efficiently?a) Representing and searching for all possible permutations within a given string.#b) Representing and searching for all possible substrings within a given string efficiently.#c) Implementing efficient sorting algorithms for string data.#d) Performing complex pattern matching in text processing tasks (can be used for this# but not the most efficient for all cases).;b;3
120;What is the time complexity of enqueue (adding an element) and dequeue (removing an element) operations in a queue implemented with an array?a) O(1) (amortized constant time) for both enqueue and dequeue assuming sufficient space in the array.#b) O(log n) for enqueue and dequeue (not typical for array implementation)#c) O(n) for enqueue and dequeue in the worst case (if resizing the array is needed)#d) The complexity depends on the specific implementation details.;a;3
121;What is the time complexity of enqueue and dequeue operations in a queue implemented with a linked list?a) O(1) (amortized constant time) for both enqueue and dequeue.#b) O(log n) for enqueue and dequeue (not typical for linked list implementation)#c) O(n) for enqueue and dequeue (can happen in some cases)#d) The complexity depends on the specific implementation details.;a;3
122;What is a priority queue and how is it different from a regular queue?a) A priority queue always serves the element with the highest priority# while a regular queue serves elements in the order they were added.#b) A priority queue always serves the element with the lowest priority (not true)#c) A priority queue cannot handle elements with the same priority (not true)#d) A priority queue is only used for sorting tasks (not true);a;3
123;In a self-balancing binary search tree like an AVL tree# what is the guaranteed maximum height difference between subtrees for a tree with n nodes?a) O(n) (the height can grow linearly in the worst case# not guaranteed to be balanced)#b) O(log n) (AVL trees maintain a logarithmic height difference)#c) O(1) (not true for all self-balancing trees)#d) The maximum height difference depends on the specific implementation details.;b;3
124;What is the main advantage of using a splay tree compared to a standard binary search tree?a) Splay trees guarantee O(1) search time for all elements (not true).#b) Splay trees dynamically adjust their structure based on access patterns# potentially improving search performance for frequently accessed elements.#c) Splay trees are simpler to implement than standard binary search trees.#d) Splay trees are well-suited for static data sets where access patterns are not well-defined.;b;3
125;What is a suffix tree used for efficiently?a) Representing and searching for all possible permutations within a given string.#b) Representing and searching for all possible substrings within a given string efficiently.#c) Implementing efficient sorting algorithms for string data.#d) Performing complex pattern matching in text processing tasks (can be used for this# but not the most efficient for all cases).;b;3
126;What is the time complexity of enqueue (adding an element) and dequeue (removing an element) operations in a queue implemented with an array?a) O(1) (amortized constant time) for both enqueue and dequeue assuming sufficient space in the array.#b) O(log n) for enqueue and dequeue (not typical for array implementation)#c) O(n) for enqueue and dequeue in the worst case (if resizing the array is needed)#d) The complexity depends on the specific implementation details.;a;3
127;What is the time complexity of enqueue and dequeue operations in a queue implemented with a linked list?a) O(1) (amortized constant time) for both enqueue and dequeue.#b) O(log n) for enqueue and dequeue (not typical for linked list implementation)#c) O(n) for enqueue and dequeue (can happen in some cases)#d) The complexity depends on the specific implementation details.;a;3
128;What is a priority queue and how is it different from a standard queue?a) A priority queue is a type of standard queue that maintains elements in a specific order (not necessarily FIFO).#b) A priority queue only allows for enqueue operations# while a standard queue allows both enqueue and dequeue.#c) A priority queue has a fixed size# while a standard queue can grow dynamically.#d) There is no practical difference between a priority queue and a standard queue.;a;3
129;What is the time complexity of enqueue and dequeue operations in a priority queue implemented with a binary heap?a) O(log n) for both enqueue and dequeue.#b) O(1) for enqueue and O(log n) for dequeue.#c) O(n) for both enqueue and dequeue.#d) The complexity depends on the specific implementation details.;a;3
130;What is a graph?a) A linear data structure used for storing elements with key-value pairs.#b) A tree-like structure where each node has at most two children.#c) A data structure composed of a collection of nodes and edges that connect pairs of nodes.#d) A data structure that allows efficient searching# insertion# and deletion operations.;c;3
131;What is a vertex (or node) in a graph?a) The edge connecting two nodes.#b) The point where two edges meet.#c) A data element stored in the graph.#d) A fundamental unit of a graph# representing an entity (such as a person# place# or object).;d;3
132;What is an edge in a graph?a) The point where two nodes meet.#b) A fundamental unit of a graph# representing a connection between two nodes.#c) The distance between two nodes.#d) A data element stored in the graph.;b;3
133;What is a weighted graph?a) A graph where each node has a weight associated with it.#b) A graph where each edge has a weight associated with it.#c) A graph where the edges have directions associated with them.#d) A graph where the nodes have different degrees of connectivity.;b;3
134;What is the difference between a directed graph and an undirected graph?a) A directed graph has edges with directions associated with them# while an undirected graph does not.#b) An undirected graph has edges with directions associated with them# while a directed graph does not.#c) A directed graph has all edges connected in one direction# while an undirected graph has edges connected bidirectionally.#d) There is no difference between a directed graph and an undirected graph.;a;3
135;What is a cyclic graph?a) A graph that contains multiple disconnected components.#b) A graph that contains a path from a node back to itself# forming a cycle.#c) A graph where all nodes are connected in a single component.#d) A graph that contains no cycles or loops.;b;3
136;What is a connected graph?a) A graph where all nodes are connected to each other by a single path.#b) A graph where each node has the same number of neighbors.#c) A graph where there is a path between every pair of nodes.#d) A graph where each node is connected to at least one other node.;c;3
137;What is a complete graph?a) A graph where every pair of distinct nodes is connected by a unique edge.#b) A graph where each node is connected to every other node by a unique edge.#c) A graph where each node has the same number of neighbors.#d) A graph where there is a path between every pair of nodes.;b;3
138;What is the degree of a node in a graph?a) The number of edges incident to the node.#b) The distance from the node to the farthest node in the graph.#c) The weight associated with the node.#d) The number of neighbors of the node.;a;3
139;What is the in-degree and out-degree of a node in a directed graph?a) The total number of edges incident to the node.#b) The number of edges leaving the node (out-degree) and the number of edges entering the node (in-degree).#c) The number of edges leaving the node (out-degree) only.#d) The number of edges entering the node (in-degree) only.;b;3
140;What is a path in a graph?a) A cycle within the graph that starts and ends at the same node.#b) A sequence of edges that connects a sequence of nodes in the graph.#c) The longest distance between any pair of nodes in the graph.#d) A set of nodes with no edges between them.;b;3
141; What is a cycle in a graph?a) A path within the graph that starts and ends at the same node.#b) A sequence of edges that connects a sequence of nodes in the graph.;a;3
142;Which of the following operations is not supported by a priority queue?a) Enqueue#b) Dequeue#c) Peek#d) Access by index;d;3
143;What is the time complexity of removing an element from the front of a linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
144;Which of the following data structures is typically used for implementing associative arrays?a) Stack#b) Queue#c) Hash Table#d) Linked List;c;3
145;What is the primary characteristic of a circular queue?a) Elements can be added and removed from both ends#b) The rear pointer wraps around to the front of the array#c) Elements are stored in a linked list#d) It uses a LIFO order;b;3
146;What is the time complexity of inserting an element into a sorted array?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
147;Which data structure is used for implementing function call recursion in most programming languages?a) Queue#b) Stack#c) Linked List#d) Binary Search Tree;b;3
148;What is the time complexity of merging two binary search trees?a) O(1)#b) O(log n)#c) O(n)#d) O(m + n);d;3
149;Which of the following data structures is suitable for implementing a LRU (Least Recently Used) cache?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;c;3
150;What is the time complexity of finding an element in a min-heap?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
151;Which operation is efficient in a linked list but not in an array?a) Random access#b) Insertion at the end#c) Insertion at the beginning#d) Deletion from the end;c;3
152;What is the time complexity of reversing an array?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
153;Which of the following is a non-linear data structure?a) Stack#b) Queue#c) Linked List#d) Graph;d;3
154;What is the time complexity of deleting a node from a doubly linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
155;Which data structure allows efficient access to the largest element?a) Stack#b) Queue#c) Max-Heap#d) Linked List;c;3
156;What is the primary disadvantage of a linked list compared to an array?a) Fixed size#b) Lack of dynamic resizing#c) Poor cache locality#d) Inefficient insertions;c;3
157;Which of the following is not a type of linked list?a) Singly Linked List#b) Doubly Linked List#c) Circular Linked List#d) Array List;d;3
158;What is the time complexity of accessing the middle element in a singly linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
159;Which data structure is commonly used to implement depth-first search (DFS) on a graph?a) Queue#b) Stack#c) Linked List#d) Binary Search Tree;b;3
160;What is the primary benefit of a hash table over a binary search tree?a) Better memory usage#b) Faster search time#c) Easier to implement#d) Supports dynamic resizing;b;3
161;Which of the following is a self-balancing binary search tree?a) Binary Search Tree#b) AVL Tree#c) Red-Black Tree#d) B-Tree;b;3
162;What is the time complexity of finding the maximum element in a binary search tree?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
163;Which data structure allows traversal in both directions?a) Stack#b) Queue#c) Doubly Linked List#d) Binary Search Tree;c;3
164;What is the time complexity of adding an element to a dynamic array when resizing is not needed?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
165;Which of the following operations is inefficient in a singly linked list?a) Insertion at the beginning#b) Deletion from the end#c) Traversal#d) Insertion at the end;b;3
166;What is the primary advantage of a doubly linked list over a singly linked list?a) More memory efficient#b) Easier to implement#c) Allows traversal in both directions#d) Faster insertions;c;3
167;Which of the following data structures can be used to implement a stack?a) Array#b) Queue#c) Hash Table#d) Binary Search Tree;a;3
168;What is the time complexity of accessing an element in a hash table with a good hash function?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
169;Which data structure is typically used for implementing a breadth-first search (BFS) on a graph?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;b;3
170;What is the time complexity of deleting an element from a max-heap?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
171;Which of the following operations is not supported by a stack?a) Push#b) Pop#c) Peek#d) Insert;d;3
172;What is the primary characteristic of a priority queue?a) Elements are processed in FIFO order#b) Elements are processed based on priority#c) Elements can be accessed randomly#d) Elements are stored in a linked list;b;3
173;Which of the following data structures allows duplicate keys?a) Stack#b) Queue#c) Hash Table#d) Multimap;d;3
174;What is the time complexity of finding an element in an unsorted linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
175;Which data structure is best for implementing a LIFO (Last In# First Out) order?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;a;3
176;What is the time complexity of adding an element to the end of a singly linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
177;Which of the following data structures is used for implementing a trie?a) Stack#b) Queue#c) Hash Table#d) Tree;d;3
178;What is the primary advantage of a binary search tree over a hash table?a) Faster search time#b) Easier to implement#c) Supports ordered traversal#d) Less memory usage;c;3
179;Which data structure is used for implementing a Deque (Double-Ended Queue)?a) Stack#b) Queue#c) Doubly Linked List#d) Binary Search Tree;c;3
180;What is the time complexity of accessing the last element in an array?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
181;Which of the following operations is efficient in a hash table?a) Insertion#b) Deletion#c) Search#d) All of the above;d;3
182;What is the time complexity of inserting an element into a binary search tree in the worst case?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
183;Which data structure is best for implementing a call stack?a) Queue#b) Stack#c) Linked List#d) Binary Search Tree;b;3
184;What is the primary characteristic of a circular linked list?a) Elements can be added and removed from both ends#b) The last node points to the first node#c) Elements are stored in a linear array#d) It uses a LIFO order;b;3
185;Which of the following data structures is used for implementing a heap?a) Stack#b) Queue#c) Array#d) Linked List;c;3
186;What is the time complexity of removing an element from a linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
187;Which of the following is a linear data structure?a) Tree#b) Graph#c) Array#d) Hash Table;c;3
188;What is the time complexity of finding the minimum element in a min-heap?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
189;Which data structure is best for implementing a FIFO (First In# First Out) order?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;b;3
190;What is the time complexity of deleting an element from an unsorted array?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
191;Which of the following data structures allows constant-time insertion and deletion at both ends?a) Stack#b) Queue#c) Deque#d) Binary Search Tree;c;3
192;What is the primary advantage of a hash table over an array?a) Faster search time#b) Easier to implement#c) Supports ordered traversal#d) More memory efficient;a;3
193;Which of the following data structures is used for implementing a balanced tree?a) Stack#b) Queue#c) Linked List#d) AVL Tree;d;3
194;What is the time complexity of searching for an element in an AVL tree?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
195;Which data structure is best for implementing a cache?a) Stack#b) Queue#c) Hash Table#d) Binary Search Tree;c;3
196;What is the time complexity of inserting an element into a sorted linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
197;Which of the following operations is efficient in a doubly linked list?a) Insertion at the beginning#b) Deletion from the end#c) Traversal#d) All of the above;d;3
198;What is the primary disadvantage of a hash table compared to a binary search tree?a) Poor memory usage#b) Lack of ordered traversal#c) Slower search time#d) More difficult to implement;b;3
199;Which data structure is used for implementing a stack in most programming languages?a) Array#b) Queue#c) Linked List#d) Binary Search Tree;a;3
200;What is the time complexity of merging two sorted arrays?a) O(1)#b) O(log n)#c) O(n)#d) O(m + n);d;3
201;Which of the following data structures is used for implementing a binary search?a) Stack#b) Queue#c) Array#d) Linked List;c;3
202;What is the primary advantage of a binary search tree over an array?a) Faster search time#b) Easier to implement#c) Supports dynamic resizing#d) More memory efficient;c;3
203;Which data structure allows efficient access to the smallest element?a) Stack#b) Queue#c) Min-Heap#d) Linked List;c;3
204;What is the time complexity of accessing the first element in a doubly linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
205;Which of the following data structures is used for implementing a map?a) Stack#b) Queue#c) Hash Table#d) Linked List;c;3
206;What is the time complexity of deleting an element from a binary search tree in the average case?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
207;Which data structure is best for implementing a circular buffer?a) Stack#b) Queue#c) Array#d) Linked List;c;3
208;What is the primary characteristic of a min-heap?a) The root is the largest element#b) The root is the smallest element#c) It uses a LIFO order#d) It is implemented using a linked list;b;3
209;Which of the following data structures allows constant-time access to the middle element?a) Stack#b) Queue#c) Array#d) Linked List;c;3
210;What is the time complexity of inserting an element into a binary search tree in the best case?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
211;Which of the following operations is efficient in a stack?a) Insertion#b) Deletion#c) Traversal#d) All of the above;a;3
212;What is the primary advantage of a doubly linked list over a singly linked list?a) More memory efficient#b) Easier to implement#c) Faster insertions#d) Allows traversal in both directions;d;3
213;Which data structure is best for implementing a sparse matrix?a) Array#b) Linked List#c) Hash Table#d) Binary Search Tree;c;3
214;What is the time complexity of deleting an element from a sorted array?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
215;Which of the following data structures allows efficient access to both the largest and smallest elements?a) Stack#b) Queue#c) Deque#d) Binary Search Tree;d;3
216;What is the time complexity of merging two linked lists?a) O(1)#b) O(log n)#c) O(n)#d) O(m + n);d;3
217;Which data structure is best for implementing an undo operation in a text editor?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;a;3
218;What is the primary advantage of a circular linked list over a singly linked list?a) More memory efficient#b) Easier to implement#c) Allows traversal from any node#d) Faster insertions;c;3
219;Which of the following data structures is used for implementing a balanced tree?a) Stack#b) Queue#c) Linked List#d) Red-Black Tree;d;3
220;What is the time complexity of searching for an element in a Red-Black tree?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
221;Which data structure is best for implementing a dictionary?a) Stack#b) Queue#c) Hash Table#d) Binary Search Tree;c;3
222;What is the time complexity of inserting an element into a sorted linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
223;Which of the following operations is efficient in a doubly linked list?a) Insertion at the beginning#b) Deletion from the end#c) Traversal#d) All of the above;d;3
224;What is the primary disadvantage of a hash table compared to a binary search tree?a) Poor memory usage#b) Lack of ordered traversal#c) Slower search time#d) More difficult to implement;b;3
225;Which data structure is used for implementing a stack in most programming languages?a) Array#b) Queue#c) Linked List#d) Binary Search Tree;a;3
226;What is the time complexity of merging two sorted arrays?a) O(1)#b) O(log n)#c) O(n)#d) O(m + n);d;3
227;Which of the following data structures is used for implementing a binary search?a) Stack#b) Queue#c) Array#d) Linked List;c;3
228;What is the primary advantage of a binary search tree over an array?a) Faster search time#b) Easier to implement#c) Supports dynamic resizing#d) More memory efficient;c;3
229;Which data structure allows efficient access to the smallest element?a) Stack#b) Queue#c) Min-Heap#d) Linked List;c;3
230;What is the time complexity of accessing the first element in a doubly linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
231;Which of the following data structures is used for implementing a map?a) Stack#b) Queue#c) Hash Table#d) Linked List;c;3
232;What is the time complexity of deleting an element from a binary search tree in the average case?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
233;Which data structure is best for implementing a circular buffer?a) Stack#b) Queue#c) Array#d) Linked List;c;3
234;What is the primary characteristic of a min-heap?a) The root is the largest element#b) The root is the smallest element#c) It uses a LIFO order#d) It is implemented using a linked list;b;3
235;Which of the following data structures allows constant-time access to the middle element?a) Stack#b) Queue#c) Array#d) Linked List;c;3
236;What is the time complexity of inserting an element into a binary search tree in the best case?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
237;Which of the following operations is efficient in a stack?a) Insertion#b) Deletion#c) Traversal#d) All of the above;a;3
238;What is the primary advantage of a doubly linked list over a singly linked list?a) More memory efficient#b) Easier to implement#c) Faster insertions#d) Allows traversal in both directions;d;3
239;Which data structure is best for implementing a sparse matrix?a) Array#b) Linked List#c) Hash Table#d) Binary Search Tree;c;3
240;What is the time complexity of deleting an element from a sorted array?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
241;Which of the following data structures allows efficient access to both the largest and smallest elements?a) Stack#b) Queue#c) Deque#d) Binary Search Tree;d;3
242;What is the time complexity of merging two linked lists?a) O(1)#b) O(log n)#c) O(n)#d) O(m + n);d;3
243;Which data structure is best for implementing an undo operation in a text editor?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;a;3
244;What is the primary advantage of a circular linked list over a singly linked list?a) More memory efficient#b) Easier to implement#c) Allows traversal from any node#d) Faster insertions;c;3
245;Which of the following data structures is used for implementing a balanced tree?a) Stack#b) Queue#c) Linked List#d) Red-Black Tree;d;3
246;What is the time complexity of searching for an element in a Red-Black tree?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
247;Which data structure is best for implementing a dictionary?a) Stack#b) Queue#c) Hash Table#d) Binary Search Tree;c;3
248;What is the time complexity of inserting an element into a sorted linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
249;Which of the following operations is efficient in a doubly linked list?a) Insertion at the beginning#b) Deletion from the end#c) Traversal#d) All of the above;d;3
250;What is the primary disadvantage of a hash table compared to a binary search tree?a) Poor memory usage#b) Lack of ordered traversal#c) Slower search time#d) More difficult to implement;b;3
251;Which data structure is used for implementing a stack in most programming languages?a) Array#b) Queue#c) Linked List#d) Binary Search Tree;a;3
252;What is the time complexity of merging two sorted arrays?a) O(1)#b) O(log n)#c) O(n)#d) O(m + n);d;3
253;Which of the following data structures is used for implementing a binary search?a) Stack#b) Queue#c) Array#d) Linked List;c;3
254;What is the primary advantage of a binary search tree over an array?a) Faster search time#b) Easier to implement#c) Supports dynamic resizing#d) More memory efficient;c;3
255;Which data structure allows efficient access to the smallest element?a) Stack#b) Queue#c) Min-Heap#d) Linked List;c;3
256;What is the time complexity of accessing the first element in a doubly linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
257;Which of the following data structures is used for implementing a map?a) Stack#b) Queue#c) Hash Table#d) Linked List;c;3
258;What is the time complexity of deleting an element from a binary search tree in the average case?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
259;Which data structure is best for implementing a circular buffer?a) Stack#b) Queue#c) Array#d) Linked List;c;3
260;What is the primary characteristic of a min-heap?a) The root is the largest element#b) The root is the smallest element#c) It uses a LIFO order#d) It is implemented using a linked list;b;3
261;Which of the following data structures allows constant-time access to the middle element?a) Stack#b) Queue#c) Array#d) Linked List;c;3
262;What is the time complexity of inserting an element into a binary search tree in the best case?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
263;Which of the following operations is efficient in a stack?a) Insertion#b) Deletion#c) Traversal#d) All of the above;a;3
264;What is the primary advantage of a doubly linked list over a singly linked list?a) More memory efficient#b) Easier to implement#c) Faster insertions#d) Allows traversal in both directions;d;3
265;Which data structure is best for implementing a sparse matrix?a) Array#b) Linked List#c) Hash Table#d) Binary Search Tree;c;3
266;What is the time complexity of deleting an element from a sorted array?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
267;Which of the following data structures allows efficient access to both the largest and smallest elements?a) Stack#b) Queue#c) Deque#d) Binary Search Tree;d;3
268;What is the time complexity of merging two linked lists?a) O(1)#b) O(log n)#c) O(n)#d) O(m + n);d;3
269;Which data structure is best for implementing an undo operation in a text editor?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;a;3
270;What is the primary advantage of a circular linked list over a singly linked list?a) More memory efficient#b) Easier to implement#c) Allows traversal from any node#d) Faster insertions;c;3
271;Which of the following data structures is used for implementing a balanced tree?a) Stack#b) Queue#c) Linked List#d) Red-Black Tree;d;3
272;What is the time complexity of searching for an element in a Red-Black tree?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
273;Which data structure is best for implementing a dictionary?a) Stack#b) Queue#c) Hash Table#d) Binary Search Tree;c;3
274;What is the time complexity of inserting an element into a sorted linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
275;Which of the following operations is efficient in a doubly linked list?a) Insertion at the beginning#b) Deletion from the end#c) Traversal#d) All of the above;d;3
276;What is the primary disadvantage of a hash table compared to a binary search tree?a) Poor memory usage#b) Lack of ordered traversal#c) Slower search time#d) More difficult to implement;b;3
277;Which data structure is used for implementing a stack in most programming languages?a) Array#b) Queue#c) Linked List#d) Binary Search Tree;a;3
278;What is the time complexity of merging two sorted arrays?a) O(1)#b) O(log n)#c) O(n)#d) O(m + n);d;3
279;Which of the following data structures is used for implementing a binary search?a) Stack#b) Queue#c) Array#d) Linked List;c;3
280;What is the primary advantage of a binary search tree over an array?a) Faster search time#b) Easier to implement#c) Supports dynamic resizing#d) More memory efficient;c;3
281;Which data structure allows efficient access to the smallest element?a) Stack#b) Queue#c) Min-Heap#d) Linked List;c;3
282;What is the time complexity of accessing the first element in a doubly linked list?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);a;3
283;Which of the following data structures is used for implementing a map?a) Stack#b) Queue#c) Hash Table#d) Linked List;c;3
284;What is the time complexity of deleting an element from a binary search tree in the average case?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);b;3
285;Which data structure is best for implementing a circular buffer?a) Stack#b) Queue#c) Array#d) Linked List;c;3
286;What is the primary characteristic of a min-heap?a) The root is the largest element#b) The root is the smallest element#c) It uses a LIFO order#d) It is implemented using a linked list;b;3
287;What is the time complexity of finding the middle element in a singly linked list with 'n' nodes?a) O(1)#b) O(log n)#c) O(n)#d) O(n^2);c;3
288;In an adjacency matrix representation of a graph# what is the space complexity?a) O(V)#b) O(E)#c) O(V + E)#d) O(V^2);d;3
289;In an adjacency matrix representation of a graph# what is the space complexity?a) O(V)#b) O(E)#c) O(V + E)#d) O(V^2);d;3
290;Which of the following operations can be performed in constant time in an array?a) Insertion at the beginning#b) Deletion at the end#c) Accessing an element by index#d) Finding the maximum element;c;3
291;What is the time complexity of deleting an element from a max-heap?a) O(1)#b) O(log n)#c) O(n)#d) O(n log n);b;3
292;Which data structure is suitable for implementing a hash table with separate chaining?a) Array#b) Stack#c) Linked List#d) Queue;c;3
293;Which traversal method is used to process each node in a binary tree exactly once in pre-order traversal?a) Visit left subtree# node# right subtree#b) Visit right subtree# node# left subtree#c) Visit node# left subtree# right subtree#d) Visit left subtree# right subtree# node;c;3
294;What is the primary advantage of a self-balancing binary search tree over a regular binary search tree?a) Faster insertion time#b) Faster deletion time#c) Better worst-case search time#d) Easier implementation;c;3
295;Which of the following is true about a circular linked list?a) It has a node with two pointers.#b) The last node points to the first node.#c) It uses more memory than a doubly linked list.#d) It can only be traversed from the first node to the last node.;b;3
296;What is the time complexity of merging two sorted linked lists of sizes 'm' and 'n' into a single sorted linked list?a) O(1)#b) O(log m + log n)#c) O(m + n)#d) O(m * n);c;3
297;Which data structure is best suited for managing printer spooling?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;b;3
298;What is the main characteristic of a B-tree that differentiates it from a binary search tree?a) It is always balanced.#b) It allows duplicate keys.#c) It has multiple children per node.#d) It supports random access.;c;3
299;In the context of a min-heap# what is the time complexity of finding the minimum element?a) O(1)#b) O(log n)#c) O(n)#d) O(n log n);a;3
300;Which data structure is typically used for implementing breadth-first search (BFS) in a graph?a) Stack#b) Queue#c) Linked List#d) Binary Search Tree;b;3